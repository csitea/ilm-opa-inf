FROM --platform=arm64 python:3.10.11-slim-buster

ARG UID \
  GID \
  BASE_PATH \
  PROJ \
  ORG_DIR \
  PROJ_PATH \
  APPUSR \
  APPGRP \
  HOME_PROJ_PATH \
  MOUNT_WORK_DIR \
  DOCKER_SHELL \
  DOCKER_HOME \
  RUN_SCRIPT \
  DOCKER_INIT_SCRIPT \
  TF_VERSION \
  TERRAFORM_VERSION \
  MODULE

ENV BASE_PATH=$BASE_PATH \
  ORG=$ORG \
  PROJ=$PROJ \
  ORG_DIR=$ORG_DIR \
  PROJ_PATH=$PROJ_PATH \
  EDITOR="vim" \
  APPUSR=$APPUSR \
  APPGRP=$APPGRP \
  PS1='`date "+%F %T"` \u@\h  \w \n\n  ' \
  HOME_PROJ_PATH=$HOME_PROJ_PATH \
  MOUNT_WORK_DIR=$MOUNT_WORK_DIR \
  DOCKER_SHELL=$DOCKER_SHELL \
  DOCKER_HOME=$DOCKER_HOME \
  RUN_SCRIPT=$RUN_SCRIPT \
  DOCKER_INIT_SCRIPT=$DOCKER_INIT_SCRIPT \
  MODULE=$MODULE \
  TF_VERSION=$TF_VERSION \
  TERRAFORM_VERSION=$TERRAFORM_VERSION



VOLUME $MOUNT_WORK_DIR

# STOP  ::: args-vars



# START ::: install alpine OS utils

RUN apt-get update && apt-get install -y --no-install-recommends  \
  perl-base jq vim wget curl sudo zip unzip make bsdmainutils tzdata \
  git openssh-server
# STOP  ::: install alpine OS utils


# START ::: install yq
# [BUG | TODO] ::: if you specify the version, somehow the binary wont run.
RUN sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 \
  && sudo chmod a+x /usr/local/bin/yq
# STOP  ::: install yq



# # START ::: python build utils
# RUN RUN apt-get update && apt-get install -y  \
#     build-base gcc openssl-dev python3-dev libmagic  \
#     python3-dev jpeg-dev zlib-dev coreutils libffi-dev util-linux

# # STOP  ::: python build utils


# START ::: install aws cli
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip" \
  && unzip awscliv2.zip \
  && sudo ./aws/install \
  && rm -rf ./aws awscliv2.zip
# STOP  ::: install aws cli

# START ::: install terraform and tfswitch
# install tfswitch to handle multiple terraform versions
RUN curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash
# STOP  ::: install terraform and tfswitch

#install kubeclt
RUN  curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl" && \
  install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \
  rm kubectl

# START ::: Enable host to container edit of proj code on ubuntu and mac.
RUN test -z $(getent group $GID | cut -d: -f1) || \
  groupmod -g $((GID+1000)) $(getent group $GID | cut -d: -f1)


# isntall python pip
RUN wget https://bootstrap.pypa.io/get-pip.py ; sudo python3 get-pip.py ; sudo rm -v get-pip.py

RUN pip3 install --upgrade pip
RUN pip3 install wheel



# START ::: add-os-user
RUN if getent group $GID; then groupmod -g $((GID+2000)) $(getent group $GID | cut -d: -f1); fi

# create a APPGRP and APPUSR
# START ::: add-os-user
RUN set -x ; groupadd -g "$GID" "$APPGRP" && \
  useradd \
  --gid "$GID" \
  --non-unique \
  --shell "$DOCKER_SHELL" \
  --home-dir "/home/appusr" \
  --uid "$UID" \
  --groups "$APPGRP" "$APPUSR" && exit 0 ; exit 1

# create home directory and change its ownership to APPUSR:APPGRP
RUN mkdir -p "/home/$APPUSR" && chown "$APPUSR":"$APPGRP" "/home/$APPUSR"


RUN echo "$APPUSR ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
RUN echo "export PS1=\"$PS1\"" >> $DOCKER_HOME/.bashrc && \
  chown -R $APPUSR:$APPGRP $DOCKER_HOME && \
  chmod -R 0775 $DOCKER_HOME


USER $APPUSR

# STOP  ::: add-os-user



# START  ::: install-poetry

# Set the Poetry version
ENV POETRY_VERSION=1.5.0

# Check if Poetry is installed and install it if necessary
RUN poetry --version >/dev/null 2>&1 \
  && poetry_version=$(poetry --version | sed -n 's/Poetry version \(.*\)/\1/p') \
  && test "$poetry_version" = "$POETRY_VERSION" \
  || (curl -sSL https://install.python-poetry.org | python - \
  && chmod 775 $HOME/.local/share/pypoetry/venv/bin/poetry )

RUN echo 'export PATH=$PATH:$HOME/.local/bin/' >> $HOME/.bashrc

ENV PATH="${PATH}:/home/${APPUSR}/.local/bin/"


# set the default shell as bash and not sh
SHELL ["/bin/bash", "-c"]

# STOP  ::: install-poetry



# START ::: copy-proj-dir

# The issue is that this only copies one of the dirs, infra-app needs infra-core and run.sh
# but copying infra-core could lead to caching issues.
COPY --chown=$APPUSR:$APPGRP . ${HOME_PROJ_PATH}
COPY --chown=$APPUSR:$APPGRP ./src/bash/run/run.sh ${HOME_PROJ_PATH}/src/bash/run/run.sh

# Create the 'run' symlink
WORKDIR $HOME_PROJ_PATH
RUN ln -sfn src/bash/run/run.sh run


# STOP  ::: copy-proj-dir




# START ::: install poetry modules in the csi module
RUN find $HOME_PROJ_PATH/src/python/ -name "pyproject.toml" -print0 | \
  while IFS= read -r -d '' f; do \
  tgt_dir=$(dirname "$f"); \
  echo "Working on tgt_dir: $tgt_dir"; \
  cd "$tgt_dir"; \
  if [ ! -z "${MODULE:-}" ] && [[ "$tgt_dir" == *"$MODULE"* ]]; then \
  test -f poetry.lock && rm -vf poetry.lock; \
  test -d .venv && rm -rv .venv; \
  poetry config virtualenvs.create true; \
  poetry install -vvv; \
  if [ $? -ne 0 ]; then \
  echo "FATAL: failed to install $tgt_dir py modules"; \
  exit 1; \
  fi; \
  fi; \
  cd -; \
  done

# STOP  ::: install poetry modules in the csi module


# Workdir is /opt/$org/$product/
WORKDIR $PROJ_PATH
# Add terraform binary to path, otherwise exec cannot find it
# even if we echo into ~/.bashrc or ~/.profile or /etc/profile
ENV PATH=/home/$APPUSR/bin:$PATH
RUN chmod 0755 "$HOME_PROJ_PATH/src/bash/scripts/docker-init-${MODULE}.sh"
CMD exec /bin/bash -c "$HOME_PROJ_PATH/src/bash/scripts/docker-init-${MODULE}.sh"
